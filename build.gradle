plugins {
    id 'maven'
    id "org.spongepowered.plugin" version "0.5.1"
    id 'net.minecrell.licenser' version '0.1.5'
    id 'net.ellune.blossom' version '1.0.1'
}

repositories {
    maven {
        name = 'minecrell-releases'
        url = 'http://repo.minecrell.net/releases'
    }
}

defaultTasks 'clean', 'build'

ext {
    pluginPackage = "${project.id}"
    pluginClass = "${pluginPackage}.UpdatifierPlugin"
}

sponge.plugin.id = project.id

blossom {
    String path = 'src/main/java/io/github/flibiostudio/updatifier/PluginInfo.java'
    replaceToken '@project.version@', project.version, path
    replaceToken '@project.id@', project.id, path
    replaceToken '@project.name@', project.name, path
    replaceToken '@project.description@', project.description, path
}

archivesBaseName = project.name
version = "v${project.version}-r${project.apiVersion.split("-")[0]}"

configurations {
    shade
    compile.extendsFrom shade
}

sourceSets {
    api.java.srcDir 'src/api/java'
    main {
        compileClasspath += api.output
    }
}

dependencies {
    compile "org.spongepowered:spongeapi:${project.apiVersion}"
    apiCompile "org.spongepowered:spongeapi:${project.apiVersion}"
    shade 'net.minecrell.mcstats:statslite-sponge:0.2.2'
}

task apiJavadoc(type: Javadoc) {
    options.links (
        'http://www.slf4j.org/apidocs/',
        'http://docs.guava-libraries.googlecode.com/git-history/v17.0/javadoc/',
        'http://google.github.io/guice/api-docs/latest/javadoc/',
        'http://zml2008.github.io/configurate/configurate-core/apidocs/',
        'http://zml2008.github.io/configurate/configurate-hocon/apidocs/',
        'http://flowpowered.com/math/',
        'http://flowpowered.com/noise/',
        'http://asm.ow2.org/asm50/javadoc/user/',
        'https://docs.oracle.com/javase/8/docs/api/',
        "https://jd.spongepowered.org/${project.apiVersion}/"
    )
    setSource sourceSets.api.allJava
    classpath = sourceSets.api.compileClasspath
}

task apiJavadocJar(type: Jar, dependsOn: apiJavadoc) {
    classifier = "api-javadoc"
    from apiJavadoc.destinationDir
}

task apiJar(type: Jar) {
    classifier = 'api'
    from sourceSets.api.output
}

task apiSourceJar(type: Jar) {
    classifier = 'api-sources'
    from sourceSets.api.allSource
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.api.allSource
    from sourceSets.main.allSource
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output
    configurations.shade.copyRecursive().setTransitive(false).each {artifact ->
        from(zipTree(artifact))
    }
}

license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
        inceptionYear = project.inceptionYear
        currentYear = project.currentYear
    }
    
    header = rootProject.file('HEADER.txt')
    include '**/*.java'
}

artifacts {
    archives apiJar
    archives apiSourceJar
    archives apiJavadocJar
    archives sourceJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

tasks.withType(Javadoc) {
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        addStringOption('Xdoclint:none', '-quiet')
    }
}
